include "target.tmh"
include "sc_control.tmh"

int main()
{
	Configure(&HCougar, MODE_EXCLUDED);
	Configure(&T16000, MODE_EXCLUDED);
	Configure(&LMFD, MODE_EXCLUDED);
	Configure(&RMFD, MODE_EXCLUDED);
	if(Init(&EventHandle)) return 1;
	SetKBRate(32, 50);
	SetKBLayout(KB_ENG);
	SetShiftButton(&Joystick, S1, &Throttle, PSF, PSB, IOTOGGLE);
	MapKeyIOUMD(&Joystick, H4U, R_CTL+KP9, R_CTL+KP8, R_CTL+KP9, R_CTL+KP8, R_CTL+KP9, R_CTL+KP8);
	MapKeyIOUMD(&Joystick, H4R, R_CTL+KP6, R_CTL+KP6, R_CTL+KP6, R_CTL+KP6, 0, 0);
	MapKeyIOUMD(&Joystick, H4D, R_CTL+KP7, R_CTL+KP2, 0, R_CTL+KP2, 0, R_CTL+KP2);
	MapKeyIOUMD(&Joystick, H4L, R_CTL+KP4, R_CTL+KP4, R_CTL+KP4, R_CTL+KP4, 0, 0);
	MapKeyIOUMD(&Joystick, H4P, PULSE+'z', PULSE+'z', PULSE+'z', PULSE+'z', PULSE+'z', PULSE+'z');
	MapAxis(&Joystick, JOYX, DX_X_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	SetSCurve(&Joystick, JOYX, 0, 0, 0, 0, 0);
	MapAxis(&Joystick, JOYY, DX_Y_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	SetSCurve(&Joystick, JOYY, 0, 0, 0, 0, 0);
	MapKeyIOUMD(&Throttle, MSP, 0, 0, 0, 0, PULSE+ENT, PULSE+ENT);
	MapKeyIOUMD(&Throttle, MSU, 0, 0, 0, 0, PULSE+KP8, PULSE+KP8);
	MapKeyIOUMD(&Throttle, MSR, 0, 0, PULSE+';', PULSE+';', PULSE+KP6, PULSE+KP6);
	MapKeyIOUMD(&Throttle, MSD, 0, 0, 0, 0, PULSE+KP2, PULSE+KP2);
	MapKeyIOUMD(&Throttle, MSL, 0, 0, PULSE+'\'', PULSE+'\'', PULSE+KP4, PULSE+KP4);
	MapKeyIOUMD(&Throttle, PSF, CHAIN( LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT+LED2)), CHAIN( LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT+LED2)), CHAIN( LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT+LED2)), CHAIN( LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT+LED2)), CHAIN( LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT+LED2)), CHAIN( LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT+LED2)));
	MapKeyIOUMD(&Throttle, PSB, CHAIN( LED(&Throttle, LED_ONOFF, LED_CURRENT-LED2), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4)), CHAIN( LED(&Throttle, LED_ONOFF, LED_CURRENT-LED2), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4)), CHAIN( LED(&Throttle, LED_ONOFF, LED_CURRENT-LED2), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4)), CHAIN( LED(&Throttle, LED_ONOFF, LED_CURRENT-LED2), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4)), CHAIN( LED(&Throttle, LED_ONOFF, LED_CURRENT-LED2), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4)), CHAIN( LED(&Throttle, LED_ONOFF, LED_CURRENT-LED2), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4)));
	MapKeyIOUMD(&Throttle, LTB, PULSE+INS, PULSE+INS, PULSE+INS, PULSE+INS, PULSE+INS, PULSE+INS);
	MapKeyIOUMD(&Throttle, PSM, CHAIN( LED(&Throttle, LED_ONOFF, LED_CURRENT-LED2), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT+LED3)), CHAIN( LED(&Throttle, LED_ONOFF, LED_CURRENT-LED2), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT+LED3)), CHAIN( LED(&Throttle, LED_ONOFF, LED_CURRENT-LED2), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT+LED3)), CHAIN( LED(&Throttle, LED_ONOFF, LED_CURRENT-LED2), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT+LED3)), CHAIN( LED(&Throttle, LED_ONOFF, LED_CURRENT-LED2), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT+LED3)), CHAIN( LED(&Throttle, LED_ONOFF, LED_CURRENT-LED2), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4), D(), LED(&Throttle, LED_ONOFF, LED_CURRENT+LED3)));
	KeyAxis(&Throttle, THR_RIGHT, 'iu', AXMAP2( LIST( 0, 99 ), 0, L_SHIFT ));
	KeyAxis(&Throttle, THR_RIGHT, 'ou', AXMAP2( LIST( 0, 99 ), 0, L_SHIFT ));
	KeyAxis(&Throttle, THR_RIGHT, 'im', AXMAP2( LIST( 0, 99 ), 0, L_SHIFT ));
	KeyAxis(&Throttle, THR_RIGHT, 'om', AXMAP2( LIST( 0, 99 ), 0, L_SHIFT ));
	KeyAxis(&Throttle, THR_RIGHT, 'id', AXMAP2( LIST( 0, 99 ), 0, L_SHIFT ));
	KeyAxis(&Throttle, THR_RIGHT, 'od', AXMAP2( LIST( 0, 99 ), 0, L_SHIFT ));
	MapAxis(&Throttle, SCX, DX_XROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	SetSCurve(&Throttle, SCX, 0, 0, 0, 0, 0);
	MapAxis(&Throttle, SCY, DX_YROT_AXIS, AXIS_REVERSED, MAP_ABSOLUTE);
	SetSCurve(&Throttle, SCY, 0, 0, 0, 0, 0);
	MapAxis(&Throttle, THR_RIGHT, DX_Z_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	SetSCurve(&Throttle, THR_RIGHT, 0, 0, 0, 0, 0);
	MapAxis(&Throttle, THR_LEFT, 0, AXIS_REVERSED, MAP_ABSOLUTE);
	SetSCurve(&Throttle, THR_LEFT, 0, 0, 0, 0, 0);
	MapAxis(&Throttle, THR_FC, DX_SLIDER_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	SetSCurve(&Throttle, THR_FC, 0, 0, 0, 0, 0);

	StarCitizen_Init();
}
int EventHandle(int type, alias o, int x)
{
	DefaultMapping(&o, x);
}